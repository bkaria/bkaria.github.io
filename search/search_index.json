{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Galaxy Order Entry REST API Specification Galaxy Order Entry REST API Specification Introduction Test Environment URLs Production Environment URLs Authentication Rate Limits Precisions HTTP Error Codes Public Endpoints HealthCheck (Consumer -> Galaxy) GET /v1.0/HealthCheck SecurityListRequest (Consumer -> Galaxy) GET /v1.0/SecurityList Private Endpoints NewOrderSingle (Galaxy -> Consumer) POST /v1.0/NewOrderSingle OrderStatusRequest (Consumer -> Galaxy) POST /v1.0/OrderStatusRequest Websocket Order Event Feed Subscribe (Consumer -> Galaxy) Subscribe Introduction This document details use of Galaxy's REST API for Order Entry. The REST API consists of public and private endpoints. Requests to private endpoints are authenticated using an API key and signature. Test Environment URLs https://rest-staging.gdtexchange.com/v1.0 wss://rest-staging.gdtexchange.com/v1.0/ws Production Environment URLs https://rest.gdtexchange.com/v1.0 wss://rest.gdtexchange.com/v1.0/ws Authentication Authenticated requests should include the following headers: Header Description X-GD-KEY Trading API Key provided by Galaxy X-GD-SIGN Generated Signature X-GD-TIMESTAMP Unix timestamp in milliseconds The X-GD-SIGN header is generated by signing the request body with the API secret key. The signature is generated by creating a SHA256 HMAC using the base64 decoded secret key on the prehash string timestamp + method + requestPath + body (+ represents string concetenation). The timestamp value is the same as the X-GD-TIMESTAMP header. The body should be the empty string (\"\") if there is no request body. base64(hmac-sha256(str(timestamp) + POST + /v1.0/OrderStatus + JSON Body, base64-decode(secretKey))) Here is a sample implementation in Python: import base64 import hashlib import hmac import time # Signing a OrderStatus request timestamp = int(time.time() * 1000) method = \"POST\" requestPath = \"/v1.0/OrderStatus\" payload = json.dumps({ \"type\": \"OrderStatusRequest\", \"clOrdIDs\": [\"1234567890\"]) sigMsg = timestamp + \"POST\" + \"/v1.0/OrderStatus\" + strPayload sign = hmac.new(base64.b64decode(secret), sigMsg.encode('utf8'), hashlib.sha256).hexdigest() # the signature is then sent in the X-GD-SIGN header The timestamp value used to generate the signature should be the same as the value in the X-GD-TIMESTAMP header. Authentication errors will result in a HTTP 401 Unauthorized response code. Rate Limits The following rate limits apply to the REST API: Request Type Rate Limit GET /v1.0/HealthCheck 1 request per second GET /v1.0/SecurityList 1 request per second POST /v1.0/NewOrderSingle 20 requests per second POST /v1.0/OrderStatusRequest 5 requests per second The number of concurrent Websocket connections per API key is limited to 5. Precisions All pairs support a price and quantity precision of 8 decimal places. HTTP Error Codes HTTP 4XX return codes are used for malformed requests; the issue is on the sender's side. HTTP 429 return code is used when breaking a request rate limit. HTTP 5XX return codes are used for internal errors; the issue is on Galaxy's side. It is important to NOT treat this as a failure operation; the execution status is UNKNOWN and could have been a success. A subsequent OrderStatus request should be used to confirm the status of the order. Public Endpoints HealthCheck (Consumer -> Galaxy) GET /v1.0/HealthCheck This request is used to check the health of the REST API. The server will respond with a 200 OK response code and a JSON object with the current timestamp in milliseconds. Sample request body: { \"type\": \"healthCheck\", \"timestamp\":1499827319559 } SecurityListRequest (Consumer -> Galaxy) GET /v1.0/SecurityList This request is used to retrieve the list of instruments available for trading. The server will respond with a 200 OK response code and a JSON array of pairs available for trading. Sample response body: { \"type\": \"securityList\", \"symbols\": [ \"BTC/USD\", \"ETH/USD\", \"LTC/USD\" ] } Private Endpoints NewOrderSingle (Galaxy -> Consumer) POST /v1.0/NewOrderSingle The request body should be a JSON object with the following fields: Field Type Description type string Valid values: \"newOrderSingle\" clOrdID string Unique Client Order ID symbol string Galaxy Symbol Identifier side string Valid values: \"1\" (Buy) \"2\" (Sell) ordType string Valid values: \"1\" (Market) \"2\" (Limit) price string Limit price as a decimal (required for limit orders) orderQty string Order size as a decimal timeInForce string Valid values: \"3\" (ImmediateOrCancel) \"4\" (FillOrKill) sendingTime number UTC Timestamp in milliseconds Notes: It is recommended that the clOrdID be a UUID to ensure uniqueness. Orders with duplicate clOrdIDs within a given trading session will be rejected. Duplicate clOrdIDs will be rejected with a HTTP 412 Precondition Failed response code. Sample request body: { \"type\":\"newOrderSingle\", \"clOrdID\":\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d0\", \"symbol\":\"BTC/USD\", \"side\":\"1\", \"ordType\":\"2\", \"price\":\"10000\", \"orderQty\":\"1\", \"timeInForce\":\"3\", \"sendingTime\":1499827319558 } Validated requests will receive a 200 OK response code and an order message in the response body with a \"A\" (pending new) status. Updates will also be sent via the Websocket Order Event Feed. Malformed request bodies will receive a 400 Bad Request response code. Requests that violate rate limits will receive a 429 Too Many Requests response code. OrderStatusRequest (Consumer -> Galaxy) POST /v1.0/OrderStatusRequest The request body should be a JSON object with a list of client order IDs: Sample request body: { \"type\":\"orderStatusRequest\", \"clOrdIDs\":[\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d0\", \"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d1\"] } This request will return a list of order objects for each ID in the request. If an order ID is not found, it will not be included in the response. The response will be a JSON object with a list of order status objects with these fields. Field Type Description type string Valid values: \"order\" clOrdID string Unique Client Order ID symbol string Galaxy symbol identifier side string Valid values: \"1\" (Buy) \"2\" (Sell) ordType string Valid values: \"1\" (Market) \"2\" (Limit) price string Limit price as a decimal (included for limit orders) orderQty string Order size as a decimal timeInForce string Valid values: \"3\" (ImmediateOrCancel) \"4\" (FillOrKill) execID number Galaxy assigned unique Execution ID ordStatus string Valid values: \"A\" (pending new) \"0\" (New) \"1\" (PartiallyFilled) \"2\" (Filled) \"4\" (Canceled) \"8\" (Rejected) leavesQty string Remaining order size as a decimal cumQty string Filled order size as a decimal avgPx string Average fill price as a decimal text string Text description of the order status sendingTime number UTC Timestamp in milliseconds The ordStatus field codes match the FIX 4.4 OrdStatus codes. It is recommended to use the Websocket Order Event Feed to receive order status updates in real-time. The request will return status of orders submitted in the current trading session only. For orders submitted in previous sessions, please refer to the Balances REST API. Sample Response: { \"type\":\"orderStatus\", \"orders\": [ { \"type\":\"order\", \"clOrdID\":\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d0\", \"symbol\":\"BTC/USD\", \"side\":\"1\", \"ordType\":\"2\", \"price\":\"10000\", \"orderQty\":\"1\", \"timeInForce\":\"3\", \"cumQty\":\"1\", \"leavesQty\":\"0\", \"avgPx\":\"22345\", \"execID\": 144787908625629188, \"ordStatus\":\"2\", \"transactTime\":1499827319559 }, { \"type\":\"order\", \"clOrdID\":\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d1\", \"symbol\":\"BTC/USD\", \"side\":\"2\", \"ordType\":\"2\", \"price\":\"10000\", \"orderQty\":\"1\", \"timeInForce\":\"3\", \"cumQty\":\"0.5\", \"leavesQty\":\"0\", \"avgPx\":\"22344\", \"execID\": 144787908625629189, \"ordStatus\":\"4\", \"transactTime\":1499827319559 } ] } Notes: ordStatus denotes the current state of the order. Partially filled orders will have a cancelled final state. This follows the FIX 4.4 OrdStatus codes. cumQty field is the total quantity executed for the order. For partial fills, this will be less than orderQty. avgPx is the average execution price for the order. After an order reaches a terminal state (Filled, Canceled, Rejected), it will not be updated subsequently and repeated calls to OrderStatus for these orders will return the same response. Websocket Order Event Feed The websocket event feed is an authenticated feed and requires the websocket upgrade request to be signed. The websocket feed provides a real-time stream of order events submitted via the REST API. The websocket feed is provided so that the consumer can avoid polling the REST API for order status updates. Websocket Endpoint Request The request to upgrade to the websocket protocol is an authenticated request and should include the mandatory headers described in the Authentication section. The X-GD-SIGN header is generated by signing the request body with the API secret key. The signature is generated by creating a SHA256 HMAC using the base64 encoded secret key on the prehash string timestamp + method + requestPath. The timestamp value is the same as the X-GD-TIMESTAMP header. For example, a valid signature for a GET request to wss://rest-staging.gdtexchange.com/v1.0/ws with a timestamp of 1499827319559 would be: base64(hmac-sha256(str(timestamp) + GET + /v1.0/ws, base64-decode(secretKey))) Response If successful, API requests will return an HTTP 101 Switching Protocols code in the response headers: HTTP/1.1 101 Switching Protocols Connection: upgrade Upgrade: websocket Sec-WebSocket-Accept: wEV5o5orKGO27qATSTLczquY3EH= At this point the HTTP connection will be replaced by a WebSocket connection. The server will send periodic ping messages to the client to keep the connection alive. The client should respond with a pong message to each ping message. If the client does not respond to a ping message within 30 seconds, the server will close the connection. Subscribe (Consumer -> Galaxy) Subscribe The Subscribe message is used to subscribe to a specific event feed. The request body should be a JSON object with a list of event types to subscribe to. Currently only the Order event feed is supported. Event Type Description Order Order events Sample request body: { \"type\":\"subscribe\", \"apiKey\": <TRADING_API_KEY>, \"eventType\":[\"Order\"], } If the subscription is successful, the server will reply with the following message: { \"type\":\"subscribed\", \"apiKey\": <TRADING_API_KEY>, \"eventTypes\":[\"Order\"], \"status\":\"success\" } On failure, the server will reply with the following message: { \"type\":\"reject\", \"apiKey\": <TRADING_API_KEY>, \"eventTypes\":[\"Order\"], \"status\":\"failure\" } For status of historical orders, please refer to the Galaxy Digital Public REST API.","title":"Home"},{"location":"#galaxy-order-entry-rest-api-specification","text":"Galaxy Order Entry REST API Specification Introduction Test Environment URLs Production Environment URLs Authentication Rate Limits Precisions HTTP Error Codes Public Endpoints HealthCheck (Consumer -> Galaxy) GET /v1.0/HealthCheck SecurityListRequest (Consumer -> Galaxy) GET /v1.0/SecurityList Private Endpoints NewOrderSingle (Galaxy -> Consumer) POST /v1.0/NewOrderSingle OrderStatusRequest (Consumer -> Galaxy) POST /v1.0/OrderStatusRequest Websocket Order Event Feed Subscribe (Consumer -> Galaxy) Subscribe","title":"Galaxy Order Entry REST API Specification"},{"location":"#introduction","text":"This document details use of Galaxy's REST API for Order Entry. The REST API consists of public and private endpoints. Requests to private endpoints are authenticated using an API key and signature.","title":"Introduction"},{"location":"#test-environment-urls","text":"https://rest-staging.gdtexchange.com/v1.0 wss://rest-staging.gdtexchange.com/v1.0/ws","title":"Test Environment URLs"},{"location":"#production-environment-urls","text":"https://rest.gdtexchange.com/v1.0 wss://rest.gdtexchange.com/v1.0/ws","title":"Production Environment URLs"},{"location":"#authentication","text":"Authenticated requests should include the following headers: Header Description X-GD-KEY Trading API Key provided by Galaxy X-GD-SIGN Generated Signature X-GD-TIMESTAMP Unix timestamp in milliseconds The X-GD-SIGN header is generated by signing the request body with the API secret key. The signature is generated by creating a SHA256 HMAC using the base64 decoded secret key on the prehash string timestamp + method + requestPath + body (+ represents string concetenation). The timestamp value is the same as the X-GD-TIMESTAMP header. The body should be the empty string (\"\") if there is no request body. base64(hmac-sha256(str(timestamp) + POST + /v1.0/OrderStatus + JSON Body, base64-decode(secretKey))) Here is a sample implementation in Python: import base64 import hashlib import hmac import time # Signing a OrderStatus request timestamp = int(time.time() * 1000) method = \"POST\" requestPath = \"/v1.0/OrderStatus\" payload = json.dumps({ \"type\": \"OrderStatusRequest\", \"clOrdIDs\": [\"1234567890\"]) sigMsg = timestamp + \"POST\" + \"/v1.0/OrderStatus\" + strPayload sign = hmac.new(base64.b64decode(secret), sigMsg.encode('utf8'), hashlib.sha256).hexdigest() # the signature is then sent in the X-GD-SIGN header The timestamp value used to generate the signature should be the same as the value in the X-GD-TIMESTAMP header. Authentication errors will result in a HTTP 401 Unauthorized response code.","title":"Authentication"},{"location":"#rate-limits","text":"The following rate limits apply to the REST API: Request Type Rate Limit GET /v1.0/HealthCheck 1 request per second GET /v1.0/SecurityList 1 request per second POST /v1.0/NewOrderSingle 20 requests per second POST /v1.0/OrderStatusRequest 5 requests per second The number of concurrent Websocket connections per API key is limited to 5.","title":"Rate Limits"},{"location":"#precisions","text":"All pairs support a price and quantity precision of 8 decimal places.","title":"Precisions"},{"location":"#http-error-codes","text":"HTTP 4XX return codes are used for malformed requests; the issue is on the sender's side. HTTP 429 return code is used when breaking a request rate limit. HTTP 5XX return codes are used for internal errors; the issue is on Galaxy's side. It is important to NOT treat this as a failure operation; the execution status is UNKNOWN and could have been a success. A subsequent OrderStatus request should be used to confirm the status of the order.","title":"HTTP Error Codes"},{"location":"#public-endpoints","text":"","title":"Public Endpoints"},{"location":"#healthcheck-consumer-galaxy-get-v10healthcheck","text":"This request is used to check the health of the REST API. The server will respond with a 200 OK response code and a JSON object with the current timestamp in milliseconds. Sample request body: { \"type\": \"healthCheck\", \"timestamp\":1499827319559 }","title":"HealthCheck (Consumer -&gt; Galaxy) GET /v1.0/HealthCheck"},{"location":"#securitylistrequest-consumer-galaxy-get-v10securitylist","text":"This request is used to retrieve the list of instruments available for trading. The server will respond with a 200 OK response code and a JSON array of pairs available for trading. Sample response body: { \"type\": \"securityList\", \"symbols\": [ \"BTC/USD\", \"ETH/USD\", \"LTC/USD\" ] }","title":"SecurityListRequest (Consumer -&gt; Galaxy) GET /v1.0/SecurityList"},{"location":"#private-endpoints","text":"","title":"Private Endpoints"},{"location":"#newordersingle-galaxy-consumer-post-v10newordersingle","text":"The request body should be a JSON object with the following fields: Field Type Description type string Valid values: \"newOrderSingle\" clOrdID string Unique Client Order ID symbol string Galaxy Symbol Identifier side string Valid values: \"1\" (Buy) \"2\" (Sell) ordType string Valid values: \"1\" (Market) \"2\" (Limit) price string Limit price as a decimal (required for limit orders) orderQty string Order size as a decimal timeInForce string Valid values: \"3\" (ImmediateOrCancel) \"4\" (FillOrKill) sendingTime number UTC Timestamp in milliseconds Notes: It is recommended that the clOrdID be a UUID to ensure uniqueness. Orders with duplicate clOrdIDs within a given trading session will be rejected. Duplicate clOrdIDs will be rejected with a HTTP 412 Precondition Failed response code. Sample request body: { \"type\":\"newOrderSingle\", \"clOrdID\":\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d0\", \"symbol\":\"BTC/USD\", \"side\":\"1\", \"ordType\":\"2\", \"price\":\"10000\", \"orderQty\":\"1\", \"timeInForce\":\"3\", \"sendingTime\":1499827319558 } Validated requests will receive a 200 OK response code and an order message in the response body with a \"A\" (pending new) status. Updates will also be sent via the Websocket Order Event Feed. Malformed request bodies will receive a 400 Bad Request response code. Requests that violate rate limits will receive a 429 Too Many Requests response code.","title":"NewOrderSingle (Galaxy -&gt; Consumer) POST /v1.0/NewOrderSingle"},{"location":"#orderstatusrequest-consumer-galaxy-post-v10orderstatusrequest","text":"The request body should be a JSON object with a list of client order IDs: Sample request body: { \"type\":\"orderStatusRequest\", \"clOrdIDs\":[\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d0\", \"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d1\"] } This request will return a list of order objects for each ID in the request. If an order ID is not found, it will not be included in the response. The response will be a JSON object with a list of order status objects with these fields. Field Type Description type string Valid values: \"order\" clOrdID string Unique Client Order ID symbol string Galaxy symbol identifier side string Valid values: \"1\" (Buy) \"2\" (Sell) ordType string Valid values: \"1\" (Market) \"2\" (Limit) price string Limit price as a decimal (included for limit orders) orderQty string Order size as a decimal timeInForce string Valid values: \"3\" (ImmediateOrCancel) \"4\" (FillOrKill) execID number Galaxy assigned unique Execution ID ordStatus string Valid values: \"A\" (pending new) \"0\" (New) \"1\" (PartiallyFilled) \"2\" (Filled) \"4\" (Canceled) \"8\" (Rejected) leavesQty string Remaining order size as a decimal cumQty string Filled order size as a decimal avgPx string Average fill price as a decimal text string Text description of the order status sendingTime number UTC Timestamp in milliseconds The ordStatus field codes match the FIX 4.4 OrdStatus codes. It is recommended to use the Websocket Order Event Feed to receive order status updates in real-time. The request will return status of orders submitted in the current trading session only. For orders submitted in previous sessions, please refer to the Balances REST API. Sample Response: { \"type\":\"orderStatus\", \"orders\": [ { \"type\":\"order\", \"clOrdID\":\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d0\", \"symbol\":\"BTC/USD\", \"side\":\"1\", \"ordType\":\"2\", \"price\":\"10000\", \"orderQty\":\"1\", \"timeInForce\":\"3\", \"cumQty\":\"1\", \"leavesQty\":\"0\", \"avgPx\":\"22345\", \"execID\": 144787908625629188, \"ordStatus\":\"2\", \"transactTime\":1499827319559 }, { \"type\":\"order\", \"clOrdID\":\"f26ec1f2-bb45-48cd-a945-3f2c2c2d80d1\", \"symbol\":\"BTC/USD\", \"side\":\"2\", \"ordType\":\"2\", \"price\":\"10000\", \"orderQty\":\"1\", \"timeInForce\":\"3\", \"cumQty\":\"0.5\", \"leavesQty\":\"0\", \"avgPx\":\"22344\", \"execID\": 144787908625629189, \"ordStatus\":\"4\", \"transactTime\":1499827319559 } ] } Notes: ordStatus denotes the current state of the order. Partially filled orders will have a cancelled final state. This follows the FIX 4.4 OrdStatus codes. cumQty field is the total quantity executed for the order. For partial fills, this will be less than orderQty. avgPx is the average execution price for the order. After an order reaches a terminal state (Filled, Canceled, Rejected), it will not be updated subsequently and repeated calls to OrderStatus for these orders will return the same response.","title":"OrderStatusRequest (Consumer -&gt; Galaxy) POST /v1.0/OrderStatusRequest"},{"location":"#websocket-order-event-feed","text":"The websocket event feed is an authenticated feed and requires the websocket upgrade request to be signed. The websocket feed provides a real-time stream of order events submitted via the REST API. The websocket feed is provided so that the consumer can avoid polling the REST API for order status updates. Websocket Endpoint Request The request to upgrade to the websocket protocol is an authenticated request and should include the mandatory headers described in the Authentication section. The X-GD-SIGN header is generated by signing the request body with the API secret key. The signature is generated by creating a SHA256 HMAC using the base64 encoded secret key on the prehash string timestamp + method + requestPath. The timestamp value is the same as the X-GD-TIMESTAMP header. For example, a valid signature for a GET request to wss://rest-staging.gdtexchange.com/v1.0/ws with a timestamp of 1499827319559 would be: base64(hmac-sha256(str(timestamp) + GET + /v1.0/ws, base64-decode(secretKey))) Response If successful, API requests will return an HTTP 101 Switching Protocols code in the response headers: HTTP/1.1 101 Switching Protocols Connection: upgrade Upgrade: websocket Sec-WebSocket-Accept: wEV5o5orKGO27qATSTLczquY3EH= At this point the HTTP connection will be replaced by a WebSocket connection. The server will send periodic ping messages to the client to keep the connection alive. The client should respond with a pong message to each ping message. If the client does not respond to a ping message within 30 seconds, the server will close the connection.","title":"Websocket Order Event Feed"},{"location":"#subscribe-consumer-galaxy-subscribe","text":"The Subscribe message is used to subscribe to a specific event feed. The request body should be a JSON object with a list of event types to subscribe to. Currently only the Order event feed is supported. Event Type Description Order Order events Sample request body: { \"type\":\"subscribe\", \"apiKey\": <TRADING_API_KEY>, \"eventType\":[\"Order\"], } If the subscription is successful, the server will reply with the following message: { \"type\":\"subscribed\", \"apiKey\": <TRADING_API_KEY>, \"eventTypes\":[\"Order\"], \"status\":\"success\" } On failure, the server will reply with the following message: { \"type\":\"reject\", \"apiKey\": <TRADING_API_KEY>, \"eventTypes\":[\"Order\"], \"status\":\"failure\" } For status of historical orders, please refer to the Galaxy Digital Public REST API.","title":"Subscribe (Consumer -&gt; Galaxy) Subscribe"}]}